Log com winston

npm install winston

Criar arquivo logger.js na pasta src

--------------------

import { createLogger, format, transports } from 'winston';

const logger = createLogger({
  level: 'info',
  format: format.json(),
  transports: [
    //
    // - Write all logs with importance level of `error` or less to `error.log`
    // - Write all logs with importance level of `info` or less to `combined.log`
    //
    new transports.File({ filename: 'error.log', level: 'error' }),
    new transports.File({ filename: 'combined.log' }),
  ],
});

export default logger

------------------

Criar arquivos na raiz do projeto

error.log

combined.log

-------------------

A importância de bons logs

Desde os primeiros computadores, manter um registro sequencial dos processos é super 
importante para entendermos a ordem de execução das coisas e identificar falhas.

Logs economizam tempo e são essenciais na resolução de problemas e suporte de incidentes. 
Eles são fundamentais para rastrear o fluxo da informação e melhorar o desempenho, 
algo que a monitorização de desempenho de aplicativos (APM) não consegue sozinha.

A análise de log é crucial. Logs revelam comportamentos anormais e possíveis pontos de melhoria. 
Ferramentas apropriadas podem descobrir gargalos de desempenho e melhorias não visíveis durante o desenvolvimento. 
A análise prolongada de logs também ajuda a identificar falhas de segurança.

Existem dois tipos principais de logs: diagnóstico e auditoria. 
Logs de diagnóstico estão relacionados ao comportamento da aplicação e ao fluxo da informação - 
como por exemplo dizer que algo deu errado, quando e porquê, 
enquanto logs de auditoria registram transações (quem fez o que e quando), 
para requisitos de software ou simplesmente para o cumprimento de leis.

Um ponto importante: devemos sempre usar níveis apropriados de log para identificar a criticidade dos eventos.

Os níveis básicos são:

. error - erro,

. warning - aviso,

. info - informação,

. debug - depuração,

. trace - rastreamento.

Quando a gente precisa solucionar um problema em uma aplicação Node.js, 
os logs podem ser fundamentais para entender a gravidade e a causa do problema. 
Stack traces (rastros de pilha) e outros tipos de atividades podem ser capturados 
em logs e vinculados a IDs de uma sessão específica, 
ID de um usuário — qualquer coisa que ajude a monitorar sua aplicação de forma mais eficiente.

O Node.js já vem com recursos de registro de logs integrados, como o console.log, 
mas uma biblioteca dedicada de logs, como o Winston, oferece mais opções para escrever os registros da sua aplicação. 
E foi por isso que utilizamos ele!

Para conhecer mais sobre o winston, que tal uma olhada na documentação 
(https://github.com/winstonjs/winston) para ir mais fundo sobre o quão poderoso ele é.